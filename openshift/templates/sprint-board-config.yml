apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: sprint-board-config
parameters:
- description: Defines the namespace within which these objects are deployed
  name: NAMESPACE
  required: true
- description: Defines name of the microservice
  name: MICROSERVICE
  value: sprint-board
  required: true
- description: Defines max memory
  name: MAX_MEMORY
  required: true  
- description: Defines min memory
  name: MIN_MEMORY
  required: true
- description: Defines max cpu
  name: MAX_CPU
  required: true  
- description: Defines min memory
  name: MIN_CPU
  required: true
- description: Defines number of replicas
  name: REPLICAS
  required: true
- description: Defines the namespace for the image stream
  name: DOCKER_NAMESPACE
  required: true  
- description: Defines docker registry
  name: DOCKER_REGISTRY
  value: docker-registry.default.svc:5000
  required: true      
- description: Defines docker registry
  name: DOCKER_IMAGE_LABEL
  required: true  
- description: Environment
  name: ENV
  required: false    
- description: Defines the product that this template is related to
  name: PRODUCT
  required: true     
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      app: "${ENV}${MICROSERVICE}"
      product: ${PRODUCT}
      environment: ${ENV}
      testStatus: untested
    name: "${ENV}${MICROSERVICE}"
    namespace: ${NAMESPACE}
  spec:
    replicas: ${REPLICAS}
    revisionHistoryLimit: 10
    selector:
      app: "${ENV}${MICROSERVICE}"
      deploymentconfig: "${ENV}${MICROSERVICE}"
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${ENV}${MICROSERVICE}"
          deploymentconfig: "${ENV}${MICROSERVICE}"
      spec:
        containers:
          - env:
              - name: SPRINT_API_SERVICE_URI
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: SPRINT_API_SERVICE_URI
              - name: STORY_API_SERVICE_URI
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: STORY_API_SERVICE_URI
              - name: TASK_API_SERVICE_URI
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: TASK_API_SERVICE_URI          
              - name: JAEGER_SERVICE_NAME
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: JAEGER_SERVICE_NAME
              - name: JAEGER_SAMPLER_TYPE
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: JAEGER_SAMPLER_TYPE
              - name: JAEGER_SAMPLER_PARAM
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: JAEGER_SAMPLER_PARAM
              - name: JAEGER_SAMPLER_MANAGER_HOST_PORT
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: JAEGER_SAMPLER_MANAGER_HOST_PORT
              - name: JAEGER_AGENT_HOST
                valueFrom:
                  configMapKeyRef:
                    name: ${MICROSERVICE} 
                    key: JAEGER_AGENT_HOST                            
            image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${MICROSERVICE}:${DOCKER_IMAGE_LABEL}
            imagePullPolicy: Always
            name: "${ENV}${MICROSERVICE}"
            ports:
              - containerPort: 8778
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
            readinessProbe:
              failureThreshold: 10
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
              httpGet:
                path: /api
                port: 8080
                scheme: HTTP
            resources:
              limits:
                cpu: ${MAX_CPU}
                memory: ${MAX_MEMORY}
              requests:
                cpu: ${MIN_CPU}
                memory: ${MIN_MEMORY}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - "${ENV}${MICROSERVICE}"
          from:
            kind: ImageStreamTag
            name: "${MICROSERVICE}:${DOCKER_IMAGE_LABEL}"
            namespace: ${DOCKER_NAMESPACE}
        type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: "${ENV}${MICROSERVICE}"
      product: ${PRODUCT}
    name: "${ENV}${MICROSERVICE}"
    namespace: ${NAMESPACE}
  spec:
    ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: 8443-tcp
        port: 8443
        protocol: TCP
        targetPort: 8443
      - name: 8778-tcp
        port: 8778
        protocol: TCP
        targetPort: 8778
    selector:
      app: "${ENV}${MICROSERVICE}"
      deploymentconfig: "${ENV}${MICROSERVICE}"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}